# ====================================
# Nexpass Environment Configuration
# ====================================

# ==================== Appwrite ====================
NEXT_PUBLIC_APPWRITE_ENDPOINT=https://cloud.appwrite.io/v1
NEXT_PUBLIC_APPWRITE_PROJECT_ID=your-project-id
NEXT_PUBLIC_APPWRITE_DATABASE_ID=your-database-id
APPWRITE_API_KEY=your-api-key

# Collection IDs - Legacy (unencrypted)
APPWRITE_TRANSACTIONS_COLLECTION_ID=transactions_dev
APPWRITE_BANK_ACCOUNTS_COLLECTION_ID=bank_accounts_dev
APPWRITE_BALANCES_COLLECTION_ID=balances_dev
APPWRITE_BANK_CONNECTIONS_COLLECTION_ID=bank_connections_dev
APPWRITE_REQUISITIONS_COLLECTION_ID=requisitions_dev

# Collection IDs - Encrypted (enable after schema deployment)
# Note: Transactions are FULLY encrypted - no public table
APPWRITE_TRANSACTIONS_ENC_COLLECTION_ID=transactions_enc
APPWRITE_BANK_ACCOUNTS_ENC_COLLECTION_ID=bank_accounts_enc
APPWRITE_BANK_BALANCES_ENC_COLLECTION_ID=bank_balances_enc
APPWRITE_BANK_CONNECTIONS_ENC_COLLECTION_ID=bank_connections_enc
APPWRITE_REQUISITIONS_ENC_COLLECTION_ID=requisitions_enc

# ==================== Encryption ====================
# IMPORTANT: Set ENCRYPTION_PROVIDER to enable encryption
# If not set or empty, the app will use legacy unencrypted storage
ENCRYPTION_PROVIDER=
# Options: 'aws' or 'gcp' (leave empty to disable encryption)

# Encryption Version
ENC_VERSION=1

# ==================== AWS KMS (if ENCRYPTION_PROVIDER=aws) ====================
# Create a KMS key in AWS Console:
# 1. Go to AWS KMS → Customer managed keys → Create key
# 2. Choose symmetric encryption key
# 3. Set key alias (e.g., 'nexpass-encryption-key')
# 4. Configure key administrators and users
# 5. Copy the ARN below
AWS_KMS_KEY_ARN=
# Example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012

# AWS Credentials (for KMS access)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1

# ==================== GCP KMS (if ENCRYPTION_PROVIDER=gcp) ====================
# Create a keyring and key in Google Cloud Console:
# gcloud kms keyrings create nexpass-keyring --location us
# gcloud kms keys create nexpass-key --keyring nexpass-keyring --location us --purpose encryption
GCP_KMS_KEY_URI=
# Example: gcp-kms://projects/my-project/locations/us/keyRings/nexpass-keyring/cryptoKeys/nexpass-key

# Path to GCP service account credentials JSON file
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

# ==================== Blind Index Keys ====================
# Generate these keys using: node scripts/generate-encryption-keys.js
# CRITICAL: Keep these SECRET - never commit to version control
# Store in AWS Secrets Manager, GCP Secret Manager, or similar
INDEX_KEY_MERCHANT=
INDEX_KEY_DESC=

# ==================== GoCardless ====================
GC_SECRET_ID=your-gocardless-secret-id
GC_SECRET_KEY=your-gocardless-secret-key
GC_REDIRECT_URI=http://localhost:3000/link-bank/callback
GC_API_BASE_URL=https://bankaccountdata.gocardless.com/api/v2

# ==================== OpenAI (for transaction categorization) ====================
OPENAI_API_KEY=your-openai-api-key

# ==================== Next.js ====================
NODE_ENV=development

# ==================== SETUP INSTRUCTIONS ====================
# 
# 1. Copy this file to .env.local:
#    cp .env.example .env.local
#
# 2. Fill in your Appwrite credentials
#
# 3. Fill in your GoCardless credentials
#
# 4. (Optional) Enable Encryption:
#    a. Set ENCRYPTION_PROVIDER=aws or gcp
#    b. Configure AWS KMS or GCP KMS credentials
#    c. Generate blind index keys: node scripts/generate-encryption-keys.js
#    d. Set INDEX_KEY_MERCHANT and INDEX_KEY_DESC
#    e. Deploy encrypted tables: cd appwrite && appwrite deploy collection
#
# 5. (Optional) Set OPENAI_API_KEY for AI-powered transaction categorization
#
# ==================== SECURITY NOTES ====================
# 
# ⚠️  CRITICAL SECURITY REQUIREMENTS:
# 
# 1. Never commit .env.local to version control
# 2. Store encryption keys in a secure secret manager (AWS Secrets Manager, etc.)
# 3. Use different encryption keys for dev/staging/production
# 4. Rotate blind index keys periodically (requires re-indexing data)
# 5. Enable KMS key rotation policy in AWS/GCP
# 6. Monitor KMS API usage and set up alerts for unusual activity
# 7. Restrict KMS key access to only the necessary IAM roles/service accounts
#
# ==================== MIGRATION TO ENCRYPTION ====================
#
# To enable encryption on an existing installation:
#
# 1. Deploy encrypted tables (appwrite.json already configured)
# 2. Set ENCRYPTION_PROVIDER and related env vars
# 3. Restart the application
# 4. New data will be encrypted automatically
# 5. Existing unencrypted data remains accessible (dual-mode support)
# 6. Run a migration script to encrypt existing data (see ENCRYPTION_IMPLEMENTATION.md)
#
# ==================== PERFORMANCE TUNING ====================
#
# Encryption adds ~5-10ms per record (includes KMS call)
# AWS Encryption SDK automatically caches DEKs to reduce KMS calls
# Adjust cache TTL in lib/server/cache-service.ts if needed (default: 30 minutes)
#
